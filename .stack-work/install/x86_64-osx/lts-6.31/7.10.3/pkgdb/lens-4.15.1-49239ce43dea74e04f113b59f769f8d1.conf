name: lens
version: 4.15.1
id: lens-4.15.1-49239ce43dea74e04f113b59f769f8d1
key: lens_JEzWz6ylObiAtAwdtVrR1n
license: BSD3
copyright: Copyright (C) 2012-2016 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
synopsis: Lenses, Folds and Traversals
description:
    This package comes \"Batteries Included\" with many useful lenses for the types
    commonly used from the Haskell Platform, and with tools for automatically
    generating lenses and isomorphisms for user-supplied data types.
    .
    The combinators in @Control.Lens@ provide a highly generic toolbox for composing
    families of getters, folds, isomorphisms, traversals, setters and lenses and their
    indexed variants.
    .
    An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
    .
    An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
    .
    A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
    .
    Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
    .
    More information on the care and feeding of lenses, including a brief tutorial and motivation
    for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
    .
    A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
    .
    /Lenses, Folds and Traversals/
    .
    With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
    .
    .
    <<http://i.imgur.com/ALlbPRa.png>>
    .
    <Hierarchy.png (Local Copy)>
    .
    You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
    use any element of the hierarchy as any type it linked to above it.
    .
    The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
    .
    For instance:
    .
    * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
    .
    * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
    .
    /Minimizing Dependencies/
    .
    If you want to provide lenses and traversals for your own types in your own libraries, then you
    can do so without incurring a dependency on this (or any other) lens package at all.
    .
    /e.g./ for a data type:
    .
    > data Foo a = Foo Int Int a
    .
    You can define lenses such as
    .
    > -- bar :: Lens' (Foo a) Int
    > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
    > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
    .
    > -- quux :: Lens (Foo a) (Foo b) a b
    > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
    > quux f (Foo a b c) = fmap (Foo a b) (f c)
    .
    without the need to use any type that isn't already defined in the @Prelude@.
    .
    And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
    .
    > -- traverseBarAndBaz :: Traversal' (Foo a) Int
    > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
    > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
    .
    What is provided in this library is a number of stock lenses and traversals for
    common haskell types, a wide array of combinators for working them, and more
    exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules:
    Control.Exception.Lens Control.Lens Control.Lens.At
    Control.Lens.Combinators Control.Lens.Cons Control.Lens.Each
    Control.Lens.Empty Control.Lens.Equality Control.Lens.Extras
    Control.Lens.Fold Control.Lens.Getter Control.Lens.Indexed
    Control.Lens.Internal Control.Lens.Internal.Bazaar
    Control.Lens.Internal.ByteString Control.Lens.Internal.Coerce
    Control.Lens.Internal.Context Control.Lens.Internal.Deque
    Control.Lens.Internal.Exception Control.Lens.Internal.FieldTH
    Control.Lens.Internal.PrismTH Control.Lens.Internal.Fold
    Control.Lens.Internal.Getter Control.Lens.Internal.Indexed
    Control.Lens.Internal.Instances Control.Lens.Internal.Iso
    Control.Lens.Internal.Level Control.Lens.Internal.List
    Control.Lens.Internal.Magma Control.Lens.Internal.Prism
    Control.Lens.Internal.Review Control.Lens.Internal.Setter
    Control.Lens.Internal.TH Control.Lens.Internal.Zoom
    Control.Lens.Iso Control.Lens.Lens Control.Lens.Level
    Control.Lens.Operators Control.Lens.Plated Control.Lens.Prism
    Control.Lens.Reified Control.Lens.Review Control.Lens.Setter
    Control.Lens.TH Control.Lens.Traversal Control.Lens.Tuple
    Control.Lens.Type Control.Lens.Wrapped Control.Lens.Zoom
    Control.Monad.Error.Lens Control.Parallel.Strategies.Lens
    Control.Seq.Lens Data.Array.Lens Data.Bits.Lens
    Data.ByteString.Lens Data.ByteString.Strict.Lens
    Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
    Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
    Data.Map.Lens Data.Sequence.Lens Data.Set.Lens Data.Text.Lens
    Data.Text.Strict.Lens Data.Text.Lazy.Lens Data.Tree.Lens
    Data.Typeable.Lens Data.Vector.Lens Data.Vector.Generic.Lens
    GHC.Generics.Lens System.Exit.Lens System.FilePath.Lens
    System.IO.Error.Lens Language.Haskell.TH.Lens Numeric.Lens
hidden-modules: Paths_lens
trusted: False
import-dirs: /Users/lizziesiegle/Desktop/programming/hask/stockbot/.stack-work/install/x86_64-osx/lts-6.31/7.10.3/lib/x86_64-osx-ghc-7.10.3/lens-4.15.1-JEzWz6ylObiAtAwdtVrR1n
library-dirs: /Users/lizziesiegle/Desktop/programming/hask/stockbot/.stack-work/install/x86_64-osx/lts-6.31/7.10.3/lib/x86_64-osx-ghc-7.10.3/lens-4.15.1-JEzWz6ylObiAtAwdtVrR1n
data-dir: /Users/lizziesiegle/Desktop/programming/hask/stockbot/.stack-work/install/x86_64-osx/lts-6.31/7.10.3/share/x86_64-osx-ghc-7.10.3/lens-4.15.1
hs-libraries: HSlens-4.15.1-JEzWz6ylObiAtAwdtVrR1n
depends:
    array-0.5.1.0-960bf9ae8875cc30355e086f8853a049
    base-4.8.2.0-cc43d8e06aa74e9c4c0132becc49ee25
    base-orphans-0.5.4-43f3d27c7bf4b3afcb3d01a72ca02a01
    bifunctors-5.2-eb1bda05092cd15bcc6c188bebf407c2
    bytestring-0.10.6.0-8363d61ddfe397e767bde0e3fed6260e
    comonad-5.0.1-cbd9da13a5cbc01fd74f5a4107b7ca3f
    containers-0.5.6.2-68e3ece8a4f91a31e327fe89f8052a53
    contravariant-1.4-ed421103876739e59710648e32daab7a
    distributive-0.5.1-af310ab11325d19980ebc6f9fb19bc8b
    exceptions-0.8.3-14df8b5e1544214512e8a38f293776b3
    filepath-1.4.0.0-f97d1e4aebfd7a03be6980454fe31d6e
    free-4.12.4-9382eeea916aa6fe4a7abe7d991eb3ac
    generic-deriving-1.10.5-e0be2e54e133ceddf0cfca6d70e57a5f
    ghc-prim-0.4.0.0-6cdc86811872333585fa98756aa7c51e
    hashable-1.2.4.0-7550865fa2a6bb3193b4e312352713f7
    kan-extensions-5.0.1-6a16189fa948f4bd77994ca3da66df89
    mtl-2.2.1-70c659371acb0d385d115bd4b49769b0
    parallel-3.2.1.0-a8b9822e86c6a94393499110f2f6f93e
    profunctors-5.2-d77d80ce5c44985c6e3350e240716e9b
    reflection-2.1.2-a1800076486d650159694cb5f635481f
    semigroupoids-5.0.1-f66cd8f859febadfa9a1639417f19b7a
    semigroups-0.18.2-cb37cbf8bffc6e3daaf5ee4029219d40
    tagged-0.8.4-1f9b177cb4065cbcffaa9a2d104acc5f
    template-haskell-2.10.0.0-c5036b5d1f11290a936c690d2f1bbd7f
    text-1.2.2.1-7d0e2ea4f6c20c86065fc9fde58d97e6
    transformers-0.5.4.0-6a44c75e2d17d979d2bba2486f967d13
    transformers-compat-0.5.1.4-ca6c9547a1cead7ae4644fa59bacd989
    unordered-containers-0.2.8.0-aa33896e913f927b99eab6159bae38da
    vector-0.11.0.0-ac8ae5a3e30f44d7f4c9370403998546
    void-0.7.2-103b7ac2240a3da6f591769f555b4181
haddock-interfaces: /Users/lizziesiegle/Desktop/programming/hask/stockbot/.stack-work/install/x86_64-osx/lts-6.31/7.10.3/doc/lens-4.15.1/lens.haddock
haddock-html: /Users/lizziesiegle/Desktop/programming/hask/stockbot/.stack-work/install/x86_64-osx/lts-6.31/7.10.3/doc/lens-4.15.1
